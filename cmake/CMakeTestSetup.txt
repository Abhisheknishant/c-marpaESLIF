ENABLE_TESTING()

ADD_EXECUTABLE        (marpaESLIFTester       EXCLUDE_FROM_ALL test/marpaESLIFTester.c)
ADD_EXECUTABLE        (marpaESLIFTesterStatic EXCLUDE_FROM_ALL test/marpaESLIFTester.c)

ADD_EXECUTABLE        (adventTester       EXCLUDE_FROM_ALL test/adventTester.c)
ADD_EXECUTABLE        (adventTesterStatic EXCLUDE_FROM_ALL test/adventTester.c)

ADD_EXECUTABLE        (russellParadoxTester       EXCLUDE_FROM_ALL test/russellParadox.c)
ADD_EXECUTABLE        (russellParadoxTesterStatic EXCLUDE_FROM_ALL test/russellParadox.c)

ADD_EXECUTABLE        (jsonTester       EXCLUDE_FROM_ALL test/jsonTester.c)
ADD_EXECUTABLE        (jsonTesterStatic EXCLUDE_FROM_ALL test/jsonTester.c)

ADD_EXECUTABLE        (selfTester       EXCLUDE_FROM_ALL test/selfTester.c)
ADD_EXECUTABLE        (selfTesterStatic EXCLUDE_FROM_ALL test/selfTester.c)

#
# Painful but putting the binaries produced with dynamic linking in the same directory as the
# dynamic libraries is the only way to make sure the OS will always see the dynamic library
# at runtime, REGARDLESS of the OS (we are thinking to Windows and Visual Studio for instance).
# and since we must do that for the dynamic test, we do it as well for any runtime thingy, just for coherency.
#
IF ("${CMAKE_HOST_SYSTEM}" MATCHES ".*Windows.*")
  SET (SEP "\\;")
ELSE ()
  SET (SEP ":")
ENDIF ()
SET (TEST_PATH "$ENV{PATH}")
SET (TEST_PATH "${TEST_PATH}${SEP}${GENERICLOGGER_RUNTIME_DIRECTORY}")
SET (TEST_PATH "${TEST_PATH}${SEP}${MARPAWRAPPER_RUNTIME_DIRECTORY}")
SET (TEST_PATH "${TEST_PATH}${SEP}${TCONV_RUNTIME_DIRECTORY}")
#
# Formally we do NOT directly depend on ICU, but on Windows, the test is
# likely to fail if ICU is not in the path
#
FIND_PACKAGE (ICU)
IF (ICU_FOUND)
    MESSAGE (STATUS "Appending ICU to PATH environment in test phase")
    SET (TEST_PATH "${TEST_PATH}${SEP}${ICU_RUNTIME_DIRECTORY}")
ENDIF ()
IF (PCRE2_DIRECTORY)
  SET (TEST_PATH "${TEST_PATH}${SEP}${PCRE2_RUNTIME_DIRECTORY}")
ENDIF ()
SET (TEST_PATH "${TEST_PATH}${SEP}${LIBRARY_OUTPUT_PATH}")
STRING(REGEX REPLACE "\\\\" "/" TEST_PATH "${TEST_PATH}")

#
# In the ALL_IN_ONE configuration, tconv is linked statically, so it requires some c++ libraries - and only CXX linker will always know
#
IF (ALL_IN_ONE)
  SET (MARPAESLIF_LINKER_LANGUAGE "CXX")
ELSE ()
  SET (MARPAESLIF_LINKER_LANGUAGE "C")
ENDIF ()

SET_TARGET_PROPERTIES (marpaESLIFTester       PROPERTIES LINKER_LANGUAGE ${MARPAESLIF_LINKER_LANGUAGE} RUNTIME_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
TARGET_LINK_LIBRARIES (marpaESLIFTester       marpaESLIF)
SET_TARGET_PROPERTIES (marpaESLIFTesterStatic PROPERTIES COMPILE_FLAGS "-DmarpaESLIF_STATIC" LINKER_LANGUAGE ${MARPAESLIF_LINKER_LANGUAGE} RUNTIME_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
TARGET_LINK_LIBRARIES (marpaESLIFTesterStatic marpaESLIF_static)

SET_TARGET_PROPERTIES (adventTester           PROPERTIES LINKER_LANGUAGE ${MARPAESLIF_LINKER_LANGUAGE} RUNTIME_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
TARGET_LINK_LIBRARIES (adventTester           marpaESLIF)
SET_TARGET_PROPERTIES (adventTesterStatic     PROPERTIES COMPILE_FLAGS "-DmarpaESLIF_STATIC" LINKER_LANGUAGE ${MARPAESLIF_LINKER_LANGUAGE} RUNTIME_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
TARGET_LINK_LIBRARIES (adventTesterStatic     marpaESLIF_static)

SET_TARGET_PROPERTIES (russellParadoxTester       PROPERTIES LINKER_LANGUAGE ${MARPAESLIF_LINKER_LANGUAGE} RUNTIME_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
TARGET_LINK_LIBRARIES (russellParadoxTester       marpaESLIF)
SET_TARGET_PROPERTIES (russellParadoxTesterStatic PROPERTIES COMPILE_FLAGS "-DmarpaESLIF_STATIC" LINKER_LANGUAGE ${MARPAESLIF_LINKER_LANGUAGE} RUNTIME_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
TARGET_LINK_LIBRARIES (russellParadoxTesterStatic marpaESLIF_static)

SET_TARGET_PROPERTIES (jsonTester             PROPERTIES LINKER_LANGUAGE ${MARPAESLIF_LINKER_LANGUAGE} RUNTIME_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
TARGET_LINK_LIBRARIES (jsonTester             marpaESLIF)
SET_TARGET_PROPERTIES (jsonTesterStatic       PROPERTIES COMPILE_FLAGS "-DmarpaESLIF_STATIC" LINKER_LANGUAGE ${MARPAESLIF_LINKER_LANGUAGE} RUNTIME_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
TARGET_LINK_LIBRARIES (jsonTesterStatic       marpaESLIF_static)

SET_TARGET_PROPERTIES (selfTester             PROPERTIES LINKER_LANGUAGE ${MARPAESLIF_LINKER_LANGUAGE} RUNTIME_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
TARGET_LINK_LIBRARIES (selfTester             marpaESLIF)
SET_TARGET_PROPERTIES (selfTesterStatic       PROPERTIES COMPILE_FLAGS "-DmarpaESLIF_STATIC" LINKER_LANGUAGE ${MARPAESLIF_LINKER_LANGUAGE} RUNTIME_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH})
TARGET_LINK_LIBRARIES (selfTesterStatic       marpaESLIF_static)

# MESSAGE(STATUS "Using PATH=${TEST_PATH}")

ADD_TEST (NAME marpaESLIFTest     COMMAND ${CMAKE_COMMAND} -E env "PATH=${TEST_PATH}" marpaESLIFTester     WORKING_DIRECTORY ${LIBRARY_OUTPUT_PATH})
ADD_TEST (NAME adventTest         COMMAND ${CMAKE_COMMAND} -E env "PATH=${TEST_PATH}" adventTester         WORKING_DIRECTORY ${LIBRARY_OUTPUT_PATH})
ADD_TEST (NAME russellParadoxTest COMMAND ${CMAKE_COMMAND} -E env "PATH=${TEST_PATH}" russellParadoxTester WORKING_DIRECTORY ${LIBRARY_OUTPUT_PATH})
ADD_TEST (NAME jsonTest           COMMAND ${CMAKE_COMMAND} -E env "PATH=${TEST_PATH}" jsonTester           WORKING_DIRECTORY ${LIBRARY_OUTPUT_PATH})
ADD_TEST (NAME selfTest           COMMAND ${CMAKE_COMMAND} -E env "PATH=${TEST_PATH}" selfTester           WORKING_DIRECTORY ${LIBRARY_OUTPUT_PATH})

ADD_TEST (NAME marpaESLIFTestStatic     COMMAND ${CMAKE_COMMAND} -E env "PATH=${TEST_PATH}" marpaESLIFTesterStatic     WORKING_DIRECTORY ${LIBRARY_OUTPUT_PATH})
ADD_TEST (NAME adventTestStatic         COMMAND ${CMAKE_COMMAND} -E env "PATH=${TEST_PATH}" adventTesterStatic         WORKING_DIRECTORY ${LIBRARY_OUTPUT_PATH})
ADD_TEST (NAME russellParadoxTestStatic COMMAND ${CMAKE_COMMAND} -E env "PATH=${TEST_PATH}" russellParadoxTesterStatic WORKING_DIRECTORY ${LIBRARY_OUTPUT_PATH})
ADD_TEST (NAME jsonTestStatic           COMMAND ${CMAKE_COMMAND} -E env "PATH=${TEST_PATH}" jsonTesterStatic           WORKING_DIRECTORY ${LIBRARY_OUTPUT_PATH})
ADD_TEST (NAME selfTestStatic           COMMAND ${CMAKE_COMMAND} -E env "PATH=${TEST_PATH}" selfTesterStatic           WORKING_DIRECTORY ${LIBRARY_OUTPUT_PATH})

ADD_CUSTOM_TARGET (check COMMAND ${CMAKE_CTEST_COMMAND}
  DEPENDS
  marpaESLIFTester       adventTester       russellParadoxTester       jsonTester       selfTester
  marpaESLIFTesterStatic adventTesterStatic russellParadoxTesterStatic jsonTesterStatic selfTesterStatic
  )
