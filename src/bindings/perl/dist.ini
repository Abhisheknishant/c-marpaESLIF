name             = MarpaX-ESLIF
author           = Jean-Damien Durand <jeandamiendurand@free.fr>
license          = Perl_5
copyright_holder = Jean-Damien Durand
copyright_year   = 2017

; -- This is 95% Dagolden remarquable dist.ini

; version provider
[Git::NextVersion]  ; get version from last release tag
; Historically, tags started with a v, then I moved to a version without v
version_regexp = ^v?(\d+\.\d+)$
 
; collect contributors list
[Git::Contributors]
 
; choose files to include
[Git::GatherDir]         ; everything from git ls-files
exclude_filename = README.pod   ; skip this generated file
exclude_filename = META.json    ; skip this generated file
exclude_filename = Changes      ; skip this generated file

[Encoding]
encoding = bytes
filename = marpaESLIFCopy/3rdparty/github/tconv-remote/3rdparty/tar/cchardet-1.0.0.tar.gz
filename = marpaESLIFCopy/3rdparty/tar/pcre2-10.22.tar.gz

; Why does it copy cmake/* undef marpaESLIFCopy if I say
; [GatherDir / SpecFiles]
; root   = marpaESLIFCopy
; prefix = marpaESLIFCopy
; !?

[GatherDir / marpaESLIFCopy]
root   = marpaESLIFCopy
prefix = marpaESLIFCopy/.

[PruneCruft]        ; default stuff to skip
[ManifestSkip]      ; if -f MANIFEST.SKIP, skip those, too
 
; file modifications
[OurPkgVersion]     ; add $VERSION = ... to all files
[InsertCopyright]   ; add copyright at "# COPYRIGHT"
[PodnameFromClassname] ; For Moops
[PodWeaver]         ; generate Pod
config_plugin = @RJBS
[Authority]
locate_comment = 1

; generated files
[License]           ; boilerplate license
[ReadmeFromPod]     ; from Pod (runs after PodWeaver)
[ReadmeAnyFromPod]  ; create README.pod in repo directory
type = pod
filename = README.pod
location = root
[ChangelogFromGit::CPAN::Changes] ; Generated Changes from git
file_name = Changes
group_by_author = 1 ; default 0
show_author_email = 1 ; default 0
tag_regexp  = ^v?(\d+\.\d+)$
 
; t tests
[Test::Compile]     ; make sure .pm files all compile
fake_home = 1       ; fakes $ENV{HOME} just in case
[Test::Portability] ; xt/release/portability.t (of file name)
options = test_one_dot = 0
[Test::PodSpelling] ; xt/author/pod-spell.t

[@TestingMania]
disable = Test::UnusedVars  ; Not fatal IMHO and there are cases where this cannot be avoided
disable = Test::Compile     ; Already done before
disable = Test::Portability ; Already done before
disable = Test::PodSpelling ; Already done before (not int, but just in case)

[Test::ReportPrereqs] ; show prereqs in automated test output
 
; metadata
[AutoPrereqs]       ; find prereqs from code
# skip = ^MarpaX::ESLIF::Test$
 
[Prereqs]
; CMakeObjects.PL stuff
Archive::Tar = 0
Config::AutoConf::INI = 0
ExtUtils::CBuilder = 0
ExtUtils::CppGuess = 0
File::Basename = 0
File::chdir = 0
File::Copy = 0
File::Copy::Recursive = 0
File::Find = 0
File::Path = 0
IPC::Run = 0
Perl::OSType = 0
POSIX = 0
strict = 0
diagnostics = 0

[MinimumPerl]       ; determine minimum perl version
 
[MetaNoIndex]       ; sets 'no_index' in META
directory = t
directory = xt
directory = examples
directory = blog
directory = marpaESLIFCopy
 
[AutoMetaResources] ; set META resources
bugtracker.rt      = 1
repository.github  = user:jddurand
homepage           = https://metacpan.org/release/%{dist}
 
[MetaProvides::Class] ; add 'provides' to META files
meta_noindex = 1        ; respect prior no_index directives
 
[MetaYAML]          ; generate META.yml (v1.4)
[MetaJSON]          ; generate META.json (v2)
 
; build system
[ExecDir]           ; include 'bin/*' as executables
[ShareDir]          ; include shared resources for File::ShareDir
; dir = share/dist/MarpaX-ESLIF
[MakeMaker::Awesome]
; But the build platforms might have different internals.
; For example the isblank stuff.
delimiter = |
header = |use IPC::Run qw/run/;
header = |use File::Spec;
header = |use File::Find;
header = |use File::Basename;
header = |use ExtUtils::CppGuess;
header = |use Config;
header = |
header = |run([$^X, File::Spec->catfile('marpaESLIFCopy', 'CMakeObjects.PL')]) or die "marpaESLIFCopy/CMakeObjects.PL: $?";
header = |my @ldfrom = ();
header = |
header = |find({ wanted => sub {
header = |                       if (-f $_) {
header = |                         my $cpath = File::Spec->canonpath($_);
header = |                         if (basename(dirname($cpath)) eq 'obj4perl') {
header = |                           push(@ldfrom, $cpath);
header = |                         }
header = |                       }
header = |                     },
header = |      no_chdir => 1 }, File::Spec->curdir);
header = |
header = |my $ldfrom = join(' ', "ESLIF\$(OBJ_EXT)", @ldfrom);
header = |
header = |#
header = |# We have a difficulty because tconv is built with C++ objects, so we need the C++ linker
header = |# We use a copy/paste of Inline-CPP-0.74/inc/ILCPPConfig/CompilerGuess.pm
header = |#
header = |sub guess_compiler {
header = |
header = |  my( $cc_guess, $libs_guess, $guesser, %configuration );
header = |
header = |  if( $Config::Config{osname} eq 'freebsd'
header = |    && $Config::Config{osvers} =~ /^(\d+)/
header = |    && $1 >= 10
header = |  ){
header = |    $cc_guess = 'clang++';
header = |    $libs_guess = '-lc++';
header = |  }
header = |  else {
header = |    $guesser = ExtUtils::CppGuess->new;
header = |    %configuration = $guesser->module_build_options;
header = |    if( $guesser->is_gcc ) {
header = |      if( $Config{cc} eq 'clang' ) {
header = |        $cc_guess = 'clang++';
header = |      } else {
header = |        $cc_guess = 'g++';
header = |      }
header = |    }
header = |    elsif ( $guesser->is_msvc ) {
header = |      $cc_guess = 'cl';
header = |    }
header = |
header = |    $cc_guess .= $configuration{extra_compiler_flags};
header = |    $libs_guess = $configuration{extra_linker_flags};
header = |
header = |    ( $cc_guess, $libs_guess )
header = |      = map { _trim_whitespace($_) } ( $cc_guess, $libs_guess );
header = |  }
header = |  return ( $cc_guess, $libs_guess );
header = |}
header = |
header = |sub _trim_whitespace {
header = |  my $string = shift;
header = |  $string =~ s/^\s+|\s+$//g;
header = |  return $string;
header = |}
header = |
header = |my ($cpp_compiler, $cpp_libs) = guess_compiler();

WriteMakefile_arg = LDFROM => $ldfrom
WriteMakefile_arg = dynamic_lib => { OTHERLDFLAGS => $cpp_libs }
WriteMakefile_arg = INC => join(' ', map { "-I$_ " } (File::Spec->catdir('marpaESLIFCopy', 'output', 'include'), File::Spec->catdir('marpaESLIFCopy', 'include'), File::Spec->catdir('marpaESLIFCopy', 'output', '3rdparty', 'genericLogger-remote', 'output', 'include'), File::Spec->catdir('marpaESLIFCopy', 'output', '3rdparty', 'genericLogger-remote', 'include'), ) )

[DynamicPrereqs]
-delimiter = |
-raw = |use Config;
-raw = |if (! $Config{usethreads}) {
-raw = |  foreach (qw/PREREQ_PM BUILD_REQUIRES TEST_REQUIRES/) {
-raw = |    delete($WriteMakefileArgs{$_}{Thread}) if (exists($WriteMakefileArgs{$_}));
-raw = |    delete($FallbackPrereqs{$_}{Thread})   if (exists($FallbackPrereqs{$_}));
-raw = |  }
-raw = |}

; manifest (after all generated files)
[Manifest]          ; create MANIFEST
 
; copy META.json back to repo dis
[CopyFilesFromBuild]
copy = META.json
copy = Changes
 
; before release
[Git::Check]        ; ensure all files checked in except those generated during dzil
allow_dirty = Changes
allow_dirty = README.pod
allow_dirty = META.json
 
[CheckMetaResources]     ; ensure META has 'resources' data
[CheckPrereqsIndexed]    ; ensure prereqs are on CPAN
; [CheckChangesHasContent] ; ensure Changes has been updated
; [CheckExtraTests]   ; ensure xt/ tests pass
[TestRelease]       ; ensure t/ tests pass
[ConfirmRelease]    ; prompt before uploading
 
; releaser
; [FakeRelease]
[UploadToCPAN]      ; uploads to CPAN
 
; after release
[Git::Commit] ; commit Changes (as released)
allow_dirty = Changes
allow_dirty = README.pod
allow_dirty = META.json
commit_msg  = Release of version %v
 
[Git::Tag]          ; tag repo with custom tag
tag_format = %v
 
; NextRelease acts *during* pre-release to write $VERSION and
; timestamp to Changes and  *after* release to add a new {{$NEXT}}
; section, so to act at the right time after release, it must actually
; come after Commit_Dirty_Files but before Commit_Changes in the
; dist.ini.  It will still act during pre-release as usual
 
[NextRelease]

[Git::Commit / Commit_Changes] ; commit Changes (for new dev)
changelog = Changes
allow_dirty = README.pod
allow_dirty = META.json
 
[Git::Push]         ; push repo to remote
push_to = origin
[Clean]
