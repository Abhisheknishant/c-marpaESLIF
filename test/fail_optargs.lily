import test

var t = test.t

t.interpret_for_error("Forbid plain arguments after optargs.",
    """\
    SyntaxError: Non-optional argument follows optional argument.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    define f(a: *Integer=10, b: Integer) {  }
    """)

t.interpret_for_error("Forbid enums taking arguments from being an optarg default.",
    """\
    SyntaxError: Only variants that take no arguments can be default arguments.\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    enum Test {
        One(Integer),
        Two
    }

    define f(a: *Test = One)
    """)

t.interpret_for_error("Error when optarg enum given non-member.",
    """\
    SyntaxError: 'Test' does not have a variant named 'what'.\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    enum Test {
        One,
        Two
    }

    define f(a: *Test = what)
    """)

t.interpret_for_error("Forbid Boolean optarg from getting a non-Boolean value.",
    """\
    SyntaxError: 'hello' is not a valid default value for a Boolean.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    define f(a: *Boolean=hello) { }
    """)

t.interpret_for_error("Forbid optarg mismatch.",
    """\
    SyntaxError: Cannot assign type 'Function (Integer, *Integer => Integer)' to type 'Function (String => String)'.\n    \
        from test\/[subinterp]:7:\
    """,
    """\
    define f(a: String) : String { return "10" }

    define g(a: Integer, b: *Integer=10) : Integer { return 10 }

    var h = f

    h = g
    """)

t.interpret_for_error("Wrong argument count to optargs (too few).",
    """\
    SyntaxError: Wrong number of arguments to f (0 for 1..2).\n    \
        from test\/[subinterp]:5:\
    """,
    """\
    define f(a: Integer, b: *Integer = 10) {

    }

    f()
    """)

t.interpret_for_error("Wrong argument count to optargs (too many).",
    """\
    SyntaxError: Wrong number of arguments to f (3 for 1..2).\n    \
        from test\/[subinterp]:5:\
    """,
    """\
    define f(a: Integer, b: *Integer = 10) {

    }

    f(1, 2, 3)
    """)

t.interpret_for_error("Forbid optarg function narrowing to non-optarg.",
    """\
    SyntaxError: Cannot assign type 'Function (Integer)' to type 'Function (Integer, *Integer)'.\n    \
        from test\/[subinterp]:13:\
    """,
    """\
    define f(a: Integer) {  }

    define g(a: Integer, b: *Integer=10) {  }

    # This causes h to have f's type.
    var h = g

    # This doesn't work. Math can be used to explain:
    # g wants 1-2 types. It can handle optional arguments.
    # f wants 1 type.
    # Internally, this doesn't work because pushing too many args onto a
    # function not preprared for it does bad things to the stack.
    h = f
    """)

t.interpret_for_error("Forbid generic type from having a default value.",
    """\
    SyntaxError: Type 'A' cannot have a default value.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    define f[A](a: Function(*A => A)) {  }
    """)

t.interpret_for_error("Forbid optargs for variants.",
    """\
    SyntaxError: Variant types cannot have default values.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    enum Test {
        Check(*Integer),
        Blank
    }
    """)
