var total = 0, failed = 0

define ok(b: Boolean, s: String)
{
    total += 1

    if b == false: {
        stderr.write($"Test ^(total) (^(s)) failed.\n")
        failed += 1
    }
}

ok(B"0".encode("invalidmode").is_none(),        "ByteString.encode with invalid mode fails.")
ok(B"\000".encode("error").is_none(),           "ByteString.encode with embedded zero fails.")
ok(B"\195\169".encode("error").unwrap() == "Ã©", "ByteString.encode(error) allows valid utf-8.")
ok(B"".encode("error").unwrap() == "",          "ByteString.encode(error) allows an empty string.")
ok(B"asdf".encode("error").unwrap() == "asdf",  "ByteString.encode(error) allows plain ascii.")
ok(B"\255\255\255".encode("error").is_none(),   "ByteString.encode(error) forbids invalid utf-8 (255 * 3).")

ok(B"abc".size() == 3,                "ByteString.size basic success case.")
ok("abc".to_bytestring().size() == 3, "ByteString.size for converted String.")

ok({||
    var success = true
    var i = 0
    var expect = ['a', 'b', 'c']

    B"abc".each_byte{|b|
        if success: {
            success = (expect[i] == b)
            i += 1
        }
    }

    success == true
}(), "")

if failed == 0:
    print($"^(total) of ^(total) tests passed.")
else:
    stderr.write($"^(failed) tests have failed.\n")
