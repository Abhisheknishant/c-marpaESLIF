=for html <a href="https://travis-ci.org/jddurand/c-marpaESLIF"><img src="https://travis-ci.org/jddurand/c-marpaESLIF.svg?branch=master" alt="Travis CI build status" height="18"></a> <a href="https://badge.fury.io/gh/jddurand%2Fc-marpaESLIF"><img src="https://badge.fury.io/gh/jddurand%2Fc-marpaESLIF.svg" alt="GitHub version" height="18"></a> <a href="http://opensource.org/licenses/MIT" rel="nofollow noreferrer"><img src="https://img.shields.io/badge/license-MIT-blue.svg" alt="License MIT" height="18"></a>

=head1 NAME

marpaESLIF - Extended Marpa's Scanless Interface

=head1 DESCRIPTION

marpaESLIF is a Scanless Interface expressed in a BNF format, that is using L<marpaWrapper|https://github.com/jddurand/c-marpaWrapper>, itself being a thin interface on top of L<libmarpa|https://jeffreykegler.github.io/Marpa-web-site/libmarpa.html> parser.

The BNF is inspired from L<Marpa::R2's DSL|https://metacpan.org/pod/distribution/Marpa-R2/pod/Scanless/DSL.pod>, though with some incompatible changes.

There are three runtime components: the grammar, recognizer and valuation.

=head1 BNF

marpaESLIF BNF can be expressed in itself:

  discard ::= <whitespace>
  discard ::= <perl comment> 
  discard ::= <cplusplus comment> 

  <statements> ::= <statement>*
  <statement> ::= <start rule>
  <statement> ::= <desc rule>
  <statement> ::= <empty rule>
  <statement> ::= <null statement>
  <statement> ::= <statement group>
  <statement> ::= <priority rule>
  <statement> ::= <quantified rule>
  <statement> ::= <discard rule>
  <statement> ::= <default rule>
  <statement> ::= <lexeme rule>
  <statement> ::= <completion event declaration>
  <statement> ::= <nulled event declaration>
  <statement> ::= <prediction event declaration>
  <statement> ::= <inaccessible statement>
  <statement> ::= <exception statement>
  <statement> ::= <autorank statement>
  <start rule> ::= ':start' <op declare> <symbol>
  <desc rule> ::= ':desc' <op declare> <quoted name>
  <empty rule> ::= <lhs> <op declare> <adverb list>
  <null statement> ::= ';'
  <statement group> ::= '{' <statements> '}'
  <priority rule> ::= <lhs> <op declare> <priorities>
  <quantified rule> ::= <lhs> <op declare> <rhs primary> <quantifier> <adverb list>
  <discard rule> ::= ':discard' <op declare> <rhs primary> <adverb list>
  <default rule> ::= ':default' <op declare> <adverb list>
  <lexeme rule> ::= ':lexeme' <op declare> <symbol> <adverb list>
  <completion event declaration> ::= 'event' <event initialization> '=' 'completed' <symbol name>
  <completion event declaration> ::= 'event' <event initialization> <op declare> 'completed' <symbol name>
  <nulled event declaration> ::= 'event' <event initialization> '=' 'nulled' <symbol name>
  <nulled event declaration> ::= 'event' <event initialization> <op declare> 'nulled' <symbol name>
  <prediction event declaration> ::= 'event' <event initialization> '=' 'predicted' <symbol name>
  <prediction event declaration> ::= 'event' <event initialization> <op declare> 'predicted' <symbol name>
  <inaccessible statement> ::= 'inaccessible' 'is' <inaccessible treatment> 'by' 'default'
  <inaccessible treatment> ::= 'warn'
  <inaccessible treatment> ::= 'ok'
  <inaccessible treatment> ::= 'fatal'
  <exception statement> ::= <lhs> <op declare> <rhs primary> '-' <rhs primary> <adverb list>
  <autorank statement> ::= 'autorank' 'is' <on or off> 'by' 'default'
  <op declare> ::= <op declare top grammar>
  <op declare> ::= <op declare lex grammar>
  <op declare> ::= <op declare any grammar>
  <priorities> ::= <alternatives>+ separator => <op loosen> proper => 1
  <alternatives> ::= <alternative>+ separator => <op equal priority> proper => 1
  <alternative> ::= <rhs> <adverb list>
  <adverb list> ::= <adverb list items>
  <adverb list items> ::= <adverb item>*
  <adverb item> ::= <action>
  <adverb item> ::= <left association>
  <adverb item> ::= <right association>
  <adverb item> ::= <group association>
  <adverb item> ::= <separator specification>
  <adverb item> ::= <proper specification>
  <adverb item> ::= <rank specification>
  <adverb item> ::= <null ranking specification>
  <adverb item> ::= <priority specification>
  <adverb item> ::= <pause specification>
  <adverb item> ::= <latm specification>
  <adverb item> ::= <naming>
  <adverb item> ::= <null adverb>
  <adverb item> ::= <symbol action>
  <adverb item> ::= <free action>
  <adverb item> ::= <event specification>
  <action> ::= 'action' '=>' <action name>
  <left association> ::= 'assoc' '=>' 'left'
  <right association> ::= 'assoc' '=>' 'right'
  <group association> ::= 'assoc' '=>' 'group'
  <separator specification> ::= 'separator' '=>' <single symbol>
  <proper specification> ::= 'proper' '=>' <false>
  <proper specification> ::= 'proper' '=>' <true>
  <rank specification> ::= 'rank' '=>' <signed integer>
  <null ranking specification> ::= 'null-ranking' '=>' <null ranking constant>
  <null ranking specification> ::= 'null' 'rank' '=>' <null ranking constant>
  <null ranking constant> ::= 'low'
  <null ranking constant> ::= 'high'
  <priority specification> ::= 'priority' '=>' <signed integer>
  <pause specification> ::= 'pause' '=>' 'before'
  <pause specification> ::= 'pause' '=>' 'after'
  <event specification> ::= 'event' '=>' <event initialization>
  <event initialization> ::= <event name> <event initializer>
  <event initializer> ::= '=' <on or off>
  <on or off> ::= 'on'
  <on or off> ::= 'off'
  <event initializer> ::=
  <latm specification> ::= 'latm' '=>' <false>
  <latm specification> ::= 'latm' '=>' <true>
  <naming> ::= 'name' '=>' <alternative name>
  <null adverb> ::= ','
  <symbol action> ::= 'symbol-action' '=>' <action name>
  <free action> ::= 'free-action' '=>' <free name>
  <alternative name> ::= <standard name>
  <alternative name> ::= <quoted name>
  <event name> ::= <restricted ascii graph name>
  <event name> ::= ':symbol'
  <lhs> ::= <symbol name>
  <rhs> ::= <rhs primary>+
  <rhs primary> ::= <single symbol>
  <rhs primary> ::= <quoted string>
  <rhs primary> ::= <symbol name> '@' <grammar reference>
  <single symbol> ::= <symbol>
  <single symbol> ::= <character class>
  <single symbol> ::= <regular expression>
  <symbol> ::= <symbol name>
  <symbol name> ::= <bare name>
  <symbol name> ::= <bracketed name>
  <action name> ::= <restricted ascii graph name>
  <action name> ::= '::shift'
  <action name> ::= '::undef'
  <action name> ::= '::ascii'
  <action name> ::= '::translit'
  <action name> ::= '::concat'
  <free name> ::= <restricted ascii graph name>
  <quantifier> ::= '*'
  <quantifier> ::= '+'
  <signed integer> ::= /[+-]?\d+/
  <grammar reference> ::= <quoted string>
  <grammar reference> ::= <signed integer>


=head1 SEE ALSO

L<marpaWrapper|https://github.com/jddurand/c-marpaWrapper>
