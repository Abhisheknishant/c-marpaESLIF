=for html <a href="https://travis-ci.org/jddurand/c-marpaESLIF"><img src="https://travis-ci.org/jddurand/c-marpaESLIF.svg?branch=master" alt="Travis CI build status" height="18"></a> <a href="https://badge.fury.io/gh/jddurand%2Fc-marpaESLIF"><img src="https://badge.fury.io/gh/jddurand%2Fc-marpaESLIF.svg" alt="GitHub version" height="18"></a> <a href="http://opensource.org/licenses/MIT" rel="nofollow noreferrer"><img src="https://img.shields.io/badge/license-MIT-blue.svg" alt="License MIT" height="18"></a>

=head1 NAME

marpaESLIF - Extended Marpa's Scanless Interface

=head1 DESCRIPTION

marpaESLIF is a Scanless Interface expressed in a BNF format, that is using L<marpaWrapper|https://github.com/jddurand/c-marpaWrapper>, itself being a thin interface on top of L<libmarpa|https://jeffreykegler.github.io/Marpa-web-site/libmarpa.html> parser.

The BNF is inspired from L<Marpa::R2's DSL|https://metacpan.org/pod/distribution/Marpa-R2/pod/Scanless/DSL.pod>, though with some incompatible changes and many add-ons, in particular native regular expression support, syntactic exception and unlimited number of sub-grammars.

There are three runtime components: the grammar, recognizer and valuation.

=head1 BNF

marpaESLIF BNF can be expressed in itself:

  :discard                       ::= whitespace
  :discard                       ::= <perl comment> 
  :discard                       ::= <cplusplus comment> 

  <statements>                   ::= statement*

  <statement>                    ::= <start rule>
                                   | <desc rule>
                                   | <empty rule>
                                   | <null statement>
                                   | <statement group>
                                   | <priority rule>
                                   | <quantified rule>
                                   | <discard rule>
                                   | <default rule>
                                   | <lexeme rule>
                                   | <completion event declaration>
                                   | <nulled event declaration>
                                   | <prediction event declaration>
                                   | <inaccessible statement>
                                   | <exception statement>
                                   | <autorank statement>

  <start rule>                   ::= ':start' <op declare> symbol
  <desc rule>                    ::= ':desc' <op declare> <quoted name>
  <empty rule>                   ::= <lhs> <op declare> <adverb list>
  <null statement>               ::= ';'
  <statement group>              ::= '{' statements '}'
  <priority rule>                ::= lhs <op declare> <priorities>
  <quantified rule>              ::= lhs <op declare> <rhs primary> <quantifier> <adverb list>
  <discard rule>                 ::= ':discard' <op declare> <rhs primary> <adverb list>
  <default rule>                 ::= ':default' <op declare> <adverb list>
  <lexeme rule>                  ::= ':lexeme' <op declare> symbol <adverb list>
  <completion event declaration> ::= 'event' <event initialization> '=' 'completed' <symbol name>
                                   | 'event' <event initialization> <op declare> 'completed' <symbol name>
  <nulled event declaration>     ::= 'event' <event initialization> '=' 'nulled' <symbol name>
                                   | 'event' <event initialization> <op declare> 'nulled' <symbol name>
  <prediction event declaration> ::= 'event' <event initialization> '=' 'predicted' <symbol name>
                                   | 'event' <event initialization> <op declare> 'predicted' <symbol name>
  <inaccessible statement>       ::= 'inaccessible' 'is' <inaccessible treatment> 'by' 'default'
  <inaccessible treatment>       ::= 'warn'
  <inaccessible treatment>       ::= 'ok'
  <inaccessible treatment>       ::= 'fatal'
  <exception statement>          ::= lhs <op declare> <rhs primary> '-' <rhs primary> <adverb list>
  <autorank statement>           ::= 'autorank' 'is' <on or off> 'by' 'default'
  <op declare>                   ::= <op declare top grammar>
                                   | <op declare lex grammar>
                                   | <op declare any grammar>
  <priorities>                   ::= <alternatives>+ separator => <op loosen> proper => 1
  <alternatives>                 ::= <alternative>+ separator => <op equal priority> proper => 1
  <alternative>                  ::= rhs <adverb list>
  <adverb list>                  ::= <adverb list items>
  <adverb list items>            ::= <adverb item>*
  <adverb item>                  ::= action
                                   | <left association>
                                   | <right association>
                                   | <group association>
                                   | <separator specification>
                                   | <proper specification>
                                   | <rank specification>
                                   | <null ranking specification>
                                   | <priority specification>
                                   | <pause specification>
                                   | <latm specification>
                                   | naming
                                   | <null adverb>
                                   | <symbol action>
                                   | <free action>
                                   | <event specification>
  <action>                       ::= 'action' '=>' <action name>
  <left association>             ::= 'assoc' '=>' 'left'
  <right association>            ::= 'assoc' '=>' 'right'
  <group association>            ::= 'assoc' '=>' 'group'
  <separator specification>      ::= 'separator' '=>' <single symbol>
  <proper specification>         ::= 'proper' '=>' false
                                   | 'proper' '=>' true
  <rank specification>           ::= 'rank' '=>' <signed integer>
  <null ranking specification>   ::= 'null-ranking' '=>' <null ranking constant>
                                   | 'null' 'rank' '=>' <null ranking constant>
  <null ranking constant>        ::= 'low'
                                   | 'high'
  <priority specification>       ::= 'priority' '=>' <signed integer>
  <pause specification>          ::= 'pause' '=>' 'before'
                                   | 'pause' '=>' 'after'
  <event specification>          ::= 'event' '=>' <event initialization>
  <event initialization>         ::= <event name> <event initializer>
  <event initializer>            ::= '=' <on or off>
  <event initializer>            ::=
  <on or off>                    ::= 'on'
                                   | 'off'
  <latm specification>           ::= 'latm' '=>' <false>
                                   | 'latm' '=>' <true>
  naming                         ::= 'name' '=>' <alternative name>
  <null adverb>                  ::= ','
  <symbol action>                ::= 'symbol-action' '=>' <action name>
  <free action>                  ::= 'free-action' '=>' <free name>
  <alternative name>             ::= <standard name>
  <alternative name>             ::= <quoted name>
  <event name>                   ::= <restricted ascii graph name>
                                   | ':symbol'
  lhs                            ::= <symbol name>
  rhs                            ::= <rhs primary>+
  <rhs primary>                  ::= <single symbol>
                                   | <quoted string>
                                   | <symbol name> '@' <grammar reference>
  <single symbol>                ::= symbol
                                   | <character class>
                                   | <regular expression>
  symbol                         ::= <symbol name>
  <symbol name>                  ::= <bare name>
                                   | <bracketed name>
  <action name>                  ::= <restricted ascii graph name>
                                   | '::shift'
                                   | '::undef'
                                   | '::ascii'
                                   | '::translit'
                                   | '::concat'
  <free name>                    ::= <restricted ascii graph name>
  <quantifier>                   ::= '*'
                                   | '+'
  <signed integer>               ::= /[+-]?\d+/
  <grammar reference>            ::= <quoted string>
                                   | <signed integer>

  whitespace                       ~ /[\s]+/
  <perl comment>                   ~ /(?:(?:#)(?:[^\n]*)(?:\n|\z))/u
  <cplusplus comment>              ~ /(?:(?:(?://)(?:[^\n]*)(?:\n|\z))|(?:(?:\/\*)(?:(?:[^\*]+|\*(?!\/))*)(?:\*\/)))/u
  <op declare any grammar>         ~ /:\[(\d+)\]:=/
  <op declare top grammar>         ~ '::='
  <op declare lex grammar>         ~ '~'
  <op loosen>                      ~ '||'
  <op equal priority>              ~ '|'
  <true>                           ~ '1'
  <false>                          ~ '0'
  <word character>                 ~ /[\w]/
  <one or more word characters>    ~ <word character>+ proper => 1
  <zero or more word characters>   ~ <word character>* proper => 1
  <restricted ascii graph name>    ~ /[-!#$%&()*+./;<>?@\[\\\]^_`|~A-Za-z0-9][-!#$%&()*+./:;<>?@\[\\\]^_`|~A-Za-z0-9]*/
  <bare name>                      ~ <word character>+ proper => 1
  <standard name>                  ~ /[a-zA-Z]/ <zero or more word characters>
  <bracketed name>                 ~ '<' <bracketed name string> '>'
  <bracketed name string>          ~ /[\s\w]+/
  <quoted string>                  ~ /(?:(?|(?:\')(?:[^\\\']*(?:\\.[^\\\']*)*)(?:\')|(?:\")(?:[^\\\"]*(?:\\.[^\\\"]*)*)(?:\")|(?:\{)(?:[^\\\}]*(?:\\.[^\\\}]*)*)(?:\})))/su
                                   | /(?:(?|(?:\')(?:[^\\\']*(?:\\.[^\\\']*)*)(?:\')|(?:\")(?:[^\\\"]*(?:\\.[^\\\"]*)*)(?:\")|(?:\{)(?:[^\\\}]*(?:\\.[^\\\}]*)*)(?:\})))/su ':' /ic?/
  <quoted name>                    ~ /(?:(?|(?:\')(?:[^\\\']*(?:\\.[^\\\']*)*)(?:\')|(?:\")(?:[^\\\"]*(?:\\.[^\\\"]*)*)(?:\")|(?:\{)(?:[^\\\}]*(?:\\.[^\\\}]*)*)(?:\})))/su
  <character class>                ~ /((?:\[(?:(?>[^\[\]]+)|(?-1))*\]))/
                                   | /((?:\[(?:(?>[^\[\]]+)|(?-1))*\]))/ ':' /[eijmnsxDJUuaNubcA]+/
  <regular expression>             ~ /(?:(?|(?:\/)(?:[^\\\/]*(?:\\.[^\\\/]*)*)(?:\/)))/su
                                   | /(?:(?|(?:\/)(?:[^\\\/]*(?:\\.[^\\\/]*)*)(?:\/)))/su /[eijmnsxDJUuaNubcA]+/

=head1 SEE ALSO

L<marpaWrapper|https://github.com/jddurand/c-marpaWrapper>
