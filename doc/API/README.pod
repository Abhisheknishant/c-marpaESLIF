=encoding UTF-8

=head1 NAME

marpaESLIF_API - Extended Marpa's Scanless Interface API

=head1 DESCRIPTION

marpaESLIF is a Scanless Interface expressed in a BNF format, that is using L<marpaWrapper|https://github.com/jddurand/c-marpaWrapper>, itself being a thin interface on top of L<libmarpa|https://jeffreykegler.github.io/Marpa-web-site/libmarpa.html> parser.

The whole API is available with this include:

  #include <marpaESLIF.h>

There are four namespaces:

=over

=item ESLIF

The main object.

=item ESLIFGrammar

Grammar creation and inspection.

=item ESLIFRecognizer

Parsing phase.

=item ESLIFValue

Valuation phase.

=back

and on transversal type:

  typedef struct marpaESLIFString {
    char   *bytep;            /* pointer bytes */
    size_t  bytel;            /* number of bytes */
    char   *encodingasciis;   /* Encoding of bytes, itself being writen in ASCII encoding, NUL byte terminated */
    char   *asciis;           /* ASCII (un-translatable bytes are changed to a replacement character) translation of previous bytes, NUL byte terminated - never NULL if bytep is not NULL */
    /*
     * Remark: the encodings and asciis pointers are not NULL only when ESLIF know that the buffer is associated to a "description". I.e.
     * this is happening ONLY when parsing the grammar. Raw data never have non-NULL asciis or encodings.
     */
  } marpaESLIFString_t;

which describe what is a I<string>: this is a sequence of C<bytel> bytes, starting at C<bytep> in memory, in eventual C<encodingasciis> encoding, and transliterated into C<asciis>.

=head2 ESLIF

=head3 C<marpaESLIF_newp>

  typedef struct marpaESLIFOption {
    genericLogger_t *genericLoggerp;  /* Logger. Default: NULL */
  } marpaESLIFOption_t;

  marpaESLIF_t *marpaESLIF_newp(marpaESLIFOption_t *marpaESLIFOptionp);

Any application must start by instanciating a main ESLIF. This method is returning such a main C<marpaESLIF> object, or C<NULL> is failure, using C<marpaESLIFOptionp> that is an eventual pointer to a C<marpaESLIFOption_t> structure. This structure contain:

=over

=item C<genericLoggerp>

A pointer to a C<genericLogger_t> instance. If it is NULL, then C<marpaESLIF> instance, neither any of the other namespaces, will do logging. Otherwise, all will inherit this logger object and use it.

=back

=head3 C<marpaESLIF_freev>

  void marpaESLIF_freev(marpaESLIF_t *marpaESLIFp);

The C<marpaESLIF> destructor, with parameter C<marpaESLIFp> being an instance previously created.

=head2 ESLIFGrammar

An I<ESLIFGrammar> is an array of grammars, each identified by a I<level>, that is the indice in this array. Most of the APIs in this section have a version to deal with I<current> grammar, and a version for the grammar at a wanted I<indice> or I<description>.
The default current grammar is always at level C<0>, nevertheless it is possible to instanciate a parsing at a different level, and if, as a use case, you are sharing the same actions between different levels, this is the way to know in I<which grammar> you are.

=head3 C<marpaESLIFGrammar_newp>

  typedef struct marpaESLIFGrammarOption {
    void   *bytep;               /* Input */
    size_t  bytel;               /* Input length in byte unit */
    char   *encodings;           /* Input encoding. Default: NULL */
    size_t  encodingl;           /* Length of encoding itself. Default: 0 */
    char   *encodingOfEncodings; /* Encoding of encoding, in ASCII encoding. Default: NULL. */
  } marpaESLIFGrammarOption_t;

  marpaESLIFGrammar_t *marpaESLIFGrammar_newp(marpaESLIF_t              *marpaESLIFp,
                                              marpaESLIFGrammarOption_t *marpaESLIFGrammarOptionp);

This is creating a grammar object instance, with parameters:

=over

=item C<marpaESLIFp>

Object instance of the main ESLIF.

=item C<marpaESLIFGrammarOptionp>

Required pointer to a C<marpaESLIFGrammarOption_t> structure, that contain:

=over

=item C<bytep>

A pointer to the start of the grammar. Must be non-NULL.

=item C<bytel>

Number of bytes. Must be > 0.

=item C<encodings>

Pointer to a buffer containing encoding information of the grammar. Can be NULL.

=item C<encodingl>

Number of bytes of the buffer containing encoding information. Can be 0.

=item C<encodingOfEncodings>

ASCII and NUL-terminated string giving the encoding of the encoding information itself. Can be NULL.

=back

=back

In real life-programming, grammars are assumed to always fit within a single block of memory. So there is no reader of grammar definition, we assume that C<bytep> and C<bytel> are enough for this job.

Return C<NULL> if failure, a grammar object instance on success.

=head3 C<marpaESLIFGrammar_eslifp>

  marpaESLIF_t *marpaESLIFGrammar_eslifp(marpaESLIFGrammar_t *marpaESLIFGrammarp);

Return the main ESLIF object instance from a C<marpaESLIFGrammarp> ESLIFGrammar instance, or C<NULL> is failure.

=head3 C<marpaESLIFGrammar_ngrammarib>

  short marpaESLIFGrammar_ngrammarib(marpaESLIFGrammar_t *marpaESLIFGrammarp,
                                     int                 *ngrammarip);

Put the number of grammars in the value pointed by C<ngrammarip>, which can be C<NULL>, of the current grammar from C<marpaESLIFGrammarp>. The number of grammars is the highest level plus one, and it is B<allowed> to have undefined grammars at any indice but level 0.

Return a true value on failure, a false value on failure.

=head3 C<marpaESLIFGrammar_grammar_currentb>

  short marpaESLIFGrammar_grammar_currentb(marpaESLIFGrammar_t *marpaESLIFGrammarp,
                                           int                 *levelip,
                                           marpaESLIFString_t **descpp);

Put in the values pointed by C<levelip> and C<descpp>, which can be both C<NULL>, the level and description of current grammar from C<marpaESLIFGrammarp>.

Return a true value on failure, a false value on failure.

=head3 C<marpaESLIFGrammar_grammar_by_levelb>

  short marpaESLIFGrammar_grammar_by_levelb(marpaESLIFGrammar_t *marpaESLIFGrammarp,
                                            int                  leveli,
                                            marpaESLIFString_t  *descp,
                                            int                 *levelip,
                                            marpaESLIFString_t **descpp);

Put in the values pointed by C<levelip> and C<descpp>, which can be both C<NULL>, the level and description of wanted grammar from C<marpaESLIFGrammarp>:

=over

=item C<leveli>

is the eventual explicit wanted level, ignored if < C<0>.

=item C<descp>

is the eventual explicit description, ignored if C<NULL>.

=back

C<descp> have precedence of C<leveli>.

Return a true value on failure, a false value on failure.

=head3 C<marpaESLIFGrammar_rulearray_currentb>

  short marpaESLIFGrammar_rulearray_currentb(marpaESLIFGrammar_t  *marpaESLIFGrammarp,
                                             int                 **ruleipp,
                                             size_t               *rulelp);

Put in the values pointed by C<ruleipp> and C<rulelp> the rule indices and the number of such indices of current grammar from C<marpaESLIFGrammarp>.

Return a true value on failure, a false value on failure.

=head3 C<marpaESLIFGrammar_rulearray_by_levelb>

  short marpaESLIFGrammar_rulearray_by_levelb(marpaESLIFGrammar_t  *marpaESLIFGrammarp,
                                              int                 **ruleipp,
                                              size_t               *rulelp,
                                              int                   leveli,
                                              marpaESLIFString_t   *descp);


Put in the values pointed by C<ruleipp> and C<rulelp> the rule indices and the number of such indices of wanted grammar from C<marpaESLIFGrammarp>:

=over

=item C<leveli>

is the eventual explicit wanted level, ignored if < C<0>.

=item C<descp>

is the eventual explicit description, ignored if C<NULL>.

=back

C<descp> have precedence of C<leveli>.

Return a true value on failure, a false value on failure.

=head3 C<marpaESLIFGrammar_ruledisplayform_currentb>

  short marpaESLIFGrammar_ruledisplayform_currentb(marpaESLIFGrammar_t  *marpaESLIFGrammarp,
                                                   int                   rulei,
                                                   char                **ruledisplaysp);

Put in the value pointed by C<ruledisplaysp>, which can be C<NULL>, a NUL-terminated I<ASCII encoded> version of rule name at indice C<rulei> of the current grammar from C<marpaESLIFGrammarp>.

Return a true value on failure, a false value on failure.

Example of a rule display form:

  <lstring>

=head3 C<marpaESLIFGrammar_ruledisplayform_by_levelb>

  short marpaESLIFGrammar_ruledisplayform_by_levelb(marpaESLIFGrammar_t  *marpaESLIFGrammarp,
                                                    int                   rulei,
                                                    char                **ruledisplaysp,
                                                    int                   leveli,
                                                    marpaESLIFString_t   *descp);

Put in the value pointed by C<ruledisplaysp>, which can be C<NULL>, a NUL-terminated I<ASCII encoded> version of rule name at indice C<rulei> of the wanted grammar from C<marpaESLIFGrammarp>:

=over

=item C<leveli>

is the eventual explicit wanted level, ignored if < C<0>.

=item C<descp>

is the eventual explicit description, ignored if C<NULL>.

=back

C<descp> have precedence of C<leveli>.

Return a true value on failure, a false value on failure.

=head3 C<marpaESLIFGrammar_symboldisplayform_currentb>

  short marpaESLIFGrammar_symboldisplayform_currentb(marpaESLIFGrammar_t  *marpaESLIFGrammarp,
                                                     int                   symboli,
                                                     char                **symboldisplaysp);

Put in the value pointed by C<symboldisplaysp>, which can be C<NULL>, a NUL-terminated I<ASCII encoded> version of symbol name at indice C<symboli> of the current grammar from C<marpaESLIFGrammarp>. C<symboli> is an argument of symbol actions (c.f. the documentation for actions).

Return a true value on failure, a false value on failure.

Example of a symbol display form:

  <in_string>

=head3 C<marpaESLIFGrammar_symboldisplayform_by_levelb>

  short marpaESLIFGrammar_symboldisplayform_by_levelb(marpaESLIFGrammar_t  *marpaESLIFGrammarp,
                                                      int                   symboli,
                                                      char                **symboldisplaysp,
                                                      int                   leveli,
                                                      marpaESLIFString_t   *descp);

Put in the value pointed by C<symboldisplaysp>, which can be C<NULL>, a NUL-terminated I<ASCII encoded> version of symbol name at indice C<symboli> of the wanted grammar from C<marpaESLIFGrammarp>:

=over

=item C<leveli>

is the eventual explicit wanted level, ignored if < C<0>.

=item C<descp>

is the eventual explicit description, ignored if C<NULL>.

=back

C<descp> have precedence of C<leveli>. C<symboli> is an argument of symbol actions (c.f. the documentation for actions).

Return a true value on failure, a false value on failure.

=head3 C<marpaESLIFGrammar_ruleshowform_currentb>

  short marpaESLIFGrammar_ruleshowform_currentb(marpaESLIFGrammar_t  *marpaESLIFGrammarp,
                                                int                   rulei,
                                                char                **ruleshowsp);

Put in the value pointed by C<ruleshowsp>, which can be C<NULL>, a NUL-terminated I<ASCII encoded> transliteration of rule definition at indice C<rulei> of the current grammar from C<marpaESLIFGrammarp>.

Return a true value on failure, a false value on failure.

Example of a rule show form:

  <lstring> ~ <quote> <in_string> <quote>

=head3 C<marpaESLIFGrammar_ruleshowform_by_levelb>

  short marpaESLIFGrammar_ruleshowform_by_levelb(marpaESLIFGrammar_t  *marpaESLIFGrammarp,
                                                    int                   rulei,
                                                    char                **ruleshowsp,
                                                    int                   leveli,
                                                    marpaESLIFString_t   *descp);

Put in the value pointed by C<ruleshowsp>, which can be C<NULL>, a NUL-terminated I<ASCII encoded> transliteration of rule definition at indice C<rulei> of the wanted grammar from C<marpaESLIFGrammarp>:

=over

=item C<leveli>

is the eventual explicit wanted level, ignored if < C<0>.

=item C<descp>

is the eventual explicit description, ignored if C<NULL>.

=back

C<descp> have precedence of C<leveli>.

Return a true value on failure, a false value on failure.

=head3 C<marpaESLIFGrammar_grammarshowform_currentb>

  short marpaESLIFGrammar_grammarshowform_currentb(marpaESLIFGrammar_t  *marpaESLIFGrammarp,
                                                   int                   grammari,
                                                   char                **grammarshowsp);

Put in the value pointed by C<grammarshowsp>, which can be C<NULL>, a NUL-terminated I<ASCII encoded> transliteration of grammar definition at indice C<grammari> of the current grammar from C<marpaESLIFGrammarp>. This is very exhaustive, and give internal information about all symbols and rules. See the NOTES section.

Return a true value on failure, a false value on failure.

=head3 C<marpaESLIFGrammar_grammarshowform_by_levelb>

  short marpaESLIFGrammar_grammarshowform_by_levelb(marpaESLIFGrammar_t  *marpaESLIFGrammarp,
                                                    int                   grammari,
                                                    char                **grammarshowsp,
                                                    int                   leveli,
                                                    marpaESLIFString_t   *descp);

Put in the value pointed by C<grammarshowsp>, which can be C<NULL>, a NUL-terminated I<ASCII encoded> transliteration of grammar definition at indice C<grammari> of the wanted grammar from C<marpaESLIFGrammarp>:

=over

=item C<leveli>

is the eventual explicit wanted level, ignored if < C<0>.

=item C<descp>

is the eventual explicit description, ignored if C<NULL>.

=back

C<descp> have precedence of C<leveli>.

This is very exhaustive, and give internal information about all symbols and rules. See the NOTES section.

Return a true value on failure, a false value on failure.

=head3 C<marpaESLIFGrammar_parseb>

  short marpaESLIFGrammar_parseb(marpaESLIFGrammar_t          *marpaESLIFGrammarp,
                                 marpaESLIFRecognizerOption_t *marpaESLIFRecognizerOptionp,
                                 marpaESLIFValueOption_t      *marpaESLIFValueOptionp,
                                 short                        *exhaustedbp,
                                 marpaESLIFValueResult_t      *marpaESLIFValueResultp);

Please refer to the documentation of:

=over

=item C<marpaESLIFGrammar_newp>

for the C<marpaESLIFRecognizerOption_t> structure documentation.

=item C<marpaESLIFValue_newp>

for the C<marpaESLIFValueOption_t> and C<marpaESLIFValueResult_t> structures documentation.

=back

A short form of parsing and valuation, in which no I<lexeme pause before event> is possible, which normally puts the scanning on hold waiting for the user to take action. Please refer to the L<marpaESLIF_BNF|https://github.com/jddurand/c-marpaESLIF/tree/master/doc/BNF> for more information about grammar events. The grammar at level C<0> is used.

=head3 C<marpaESLIFGrammar_parse_by_levelb>

  short marpaESLIFGrammar_parse_by_levelb(marpaESLIFGrammar_t          *marpaESLIFGrammarp,
                                          marpaESLIFRecognizerOption_t *marpaESLIFRecognizerOptionp,
                                          marpaESLIFValueOption_t      *marpaESLIFValueOptionp,
                                          short                        *exhaustedbp,
                                          int                           leveli,
                                          marpaESLIFString_t           *descp,
                                          marpaESLIFValueResult_t      *marpaESLIFValueResultp);

Same functionnality as C<marpaESLIFGrammar_parseb> for a wanted grammar from C<marpaESLIFGrammarp>:

=over

=item C<leveli>

is the eventual explicit wanted level, ignored if < C<0>.

=item C<descp>

is the eventual explicit description, ignored if C<NULL>.

=back

C<descp> have precedence of C<leveli>.

=head1 NOTES

=over

=item Thread-safety

Any of the object of this API is thread-safe but is not I<reentrant>. That is, if user need to access the same object from different threads, he is responsible of doing sychronization.

=item Grammar show form

The grammar show form is a concatenation of rule show forms and internal information, for every valid grammar level. For every grammar, the following is outputed:

=over

=item Meta grammar settings

For example:

  /*
   * **********************
   * Meta-grammar settings:
   * **********************
   */
  :start ::= json
  :default ::= action => ::concat
               symbol-action => ::shift
               latm => 1

=item Event settings

For example:

  /*
   * ***************
   * Event settings:
   * ***************
   */
  :lexeme ::= <lstring> pause => after event => lstring$=on

=item Rules

For example:

  /*
   * ******
   * Rules:
   * ******
   */
  <json> ::= <object>
  <json> ::= <array>
  <object> ::= '{' <members> '}' action => do_object
  etc...

=item Lexemes

A I<lexeme> is a symbol that is referencing another symbol of the same name but in <another> grammar level, for example:

  # --------
  # Lexemes:
  # --------
  #
  # <number> ::= <number>@+1
  # <lstring> ::= <lstring>@+1
  # <whitespace> ::= <whitespace>@+1

=item Rule properties

For every rule, Marpa parser internal properties are given, together with the rule description, and components of the rule in terms in symbol indices, for example:

  # -----------------
  # Rules properties:
  # -----------------
  #
  # Rule No 0
  #   Properties: ACCESSIBLE, PRODUCTIVE
  #   Definition: <json> ::= <object>
  #   Components:  LHS = RHS[]
  #                  0 = 1
  # ...
  #
  # Rule No 2
  #   Properties: ACCESSIBLE, PRODUCTIVE
  #   Definition: <object> ::= '{' <members> '}' action => do_object
  #   Components:  LHS = RHS[]
  #                  1 = 3 4 5
  # Rule No 3
  #   Properties: ACCESSIBLE, NULLABLE, PRODUCTIVE
  #   Definition: <members> ::= <pair>* separator => /[,]/ action => do_array
  #   Components:  LHS = RHS[]
  #                  4 = 6
  #
  # ...

=item Symbol properties

For every symbol, its ESLIF type, Marpa parser properties and definition are given. When it is a terminal, corresponding regular expression definition is given, as well as eventual JIT usage (c.f. PCRE2 information to understand what it is about). For example:

  # -------------------
  # Symbols properties:
  # -------------------
  #
  # Symbol No 0
  #         Type: ESLIF META
  #   Properties: ACCESSIBLE, PRODUCTIVE, START
  #         Name: <json>
  #
  # ...
  #
  # Symbol No 3
  #         Type: ESLIF TERMINAL
  #   Properties: ACCESSIBLE, PRODUCTIVE, TERMINAL
  #      Pattern: \{
  #        Flags: PCRE2_ANCHORED
  #          JIT: complete=yes, partial=yes
  #
  # ...
  #
  # Symbol No 23
  #         Type: ESLIF TERMINAL
  #   Properties: PRODUCTIVE, TERMINAL
  #      Pattern:
  #     0x000000: 5b 5c 73 5d                                     [\s]
  #        Flags: PCRE2_ANCHORED
  #          JIT: complete=yes, partial=yes

There are two types of terminal:

=over

=item Strings

Strings are always converted to a pattern that is fully ASCII compatible, in which ESLIF decide to eventually escape some characters, or to use them in their C<\x{...}> code point version. Therefore the definition of the PCRE2 pattern is outputed as-is.

=item Regular expression

This type include character class. In such a case, the UTF-8 byte sequence corresponding to what the grammar is defining is sent directly to PCRE2, so the definition is the dump of this UTF-8 byte sequence.

=back

=back

=back

=head1 SEE ALSO

L<genericLogger|https://github.com/jddurand/c-genericLogger>,  L<PCRE2|http://www.pcre.org/>, L<libmarpa|https://jeffreykegler.github.io/Marpa-web-site/libmarpa.html>
