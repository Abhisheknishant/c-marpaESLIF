# Copyright 2015 Jeffrey Kegler
# This file is part of Marpa::R2.  Marpa::R2 is free software: you can
# redistribute it and/or modify it under the terms of the GNU Lesser
# General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# Marpa::R2 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser
# General Public License along with Marpa::R2.  If not, see
# http://www.gnu.org/licenses/.
#
# ESLIF 2016 Jean-Damien Durand
#
# ESLIF can read Marpa::R2's SLIF with the following additions or restrictions:
# - autorank                 added
# - quoted name              added
# - blessing                 removed
# - reserved action name     removed
# - action name              revisited to contain only ascii graph characters (so that UTF-8 == ASCII -;)
# - array descriptor         removed
# - lexer name               removed
# - latm                     only latm => 1 is supported if calling scan()
# - forgiving                only forgiving => 1 is supported if calling scan()
# - regexp                   added
# - C++ style comments       added
# - quoted strings           added
# - strings have no restriction on escaping and content - they just have to be correctly delimited by '', "" or {}, escaping by \ inside
# - grammar description      added
# - grammar reference        added
# - parenthesized rhs list   removed
# - exception list           added (using '(' and ')' ...)
# - there is no notion of mask
# - pause is allowed in discard events
# - latm adverb in :lexeme rules is not allowed, latm mode is forced.
# - ":default" and "lexeme default" are unique per grammar instead of being lexically scoped
# ----------------------------------------------------------------------------------------------
# Please note that there is a very big difference between using apparently equivalent regexp and
# character class with a quantifier:
# a character class with a quantifier is reinterpreted as a rule sequence
# a regexp is never reinterpreted.
#
# The rule that always apply is: a match can NEVER be of zero length.
# Therefore, suppose that the input is 'abc', the statements:
# lhs ::= /[0-9]*/ will NEVER appear in the parse tree
# lhs ::= [0-9]*   will appear in the parse tree, because [0-9]* is reinterpreted as a sequence of
#                  [0-9], with a minimum number of sequences to 0 (true in this case)
# lhs ::= [0-9]+   will NEVER appear in the parse tree, because [0-9]+ is reinterpreted as a sequence of
#                  [0-9], with a minimum number of sequences to 1 (false in this case)
# ----------------------------------------------------------------------------------------------
#
# In any case, matches are anchored and in UTF mode by default. Anchoring cannot be changed.
# But UTF mode can be switched off with the /a modifier.
#
# Exhaustive list of modifiers are:
# eijmnsxDJugzZaN
# -------------------------------------------------------------------------------------------------

:default   ::= action => [start,length,values]
lexeme default =  action => [start,length,value]

:start                           ::= statements

statements                       ::= statement+
statement                        ::= <start rule>
                                 | <desc rule>
                                 | <empty rule>
                                 | <null statement>
                                 | <statement group>
                                 | <priority rule>
                                 | <quantified rule>
                                 | <discard rule>
                                 | <default rule>
                                 | <lexeme default statement>
                                 | <discard default statement>
                                 | <lexeme rule>
                                 | <completion event declaration>
                                 | <nulled event declaration>
                                 | <prediction event declaration>
                                 | <inaccessible statement>
                                 | <exception statement>

<start rule>                   ::= ':start' <op declare> symbol
<desc rule>                    ::= ':desc' <op declare> <quoted string>
<empty rule>                   ::= lhs <op declare> <adverb list>
<null statement>               ::= ';'
<statement group>              ::= '{' statements '}'
<priority rule>                ::= lhs <op declare> priorities
<quantified rule>              ::= lhs <op declare> <rhs primary> quantifier <adverb list>
<discard rule>                 ::= ':discard' <op declare> <rhs primary> <adverb list>
<default rule>                 ::= ':default' <op declare> <adverb list>
<lexeme default statement>     ::= 'lexeme' 'default' '=' <adverb list>
                                 | 'lexeme' 'default' <op declare> <adverb list>
<discard default statement>    ::= 'discard' 'default' '=' <adverb list>
<lexeme rule>                  ::= ':lexeme' <op declare> symbol <adverb list>
<completion event declaration> ::= 'event' <event initialization> '=' 'completed' <symbol name>
<nulled event declaration>     ::= 'event' <event initialization> '=' 'nulled' <symbol name>
<prediction event declaration> ::= 'event' <event initialization> '=' 'predicted' <symbol name>
<inaccessible statement>       ::= 'inaccessible' 'is' <inaccessible treatment> 'by' 'default'
<inaccessible treatment>       ::= 'warn' | 'ok' | 'fatal'
<exception statement>          ::= lhs <op declare> <rhs primary> '-' <parenthesized rhs exception list>

<op declare>                   ::= <op declare top grammar>
                                 | <op declare lex grammar>
                                 | <op declare any grammar>

priorities                     ::= alternatives+ separator => <op loosen>         proper => 1
alternatives                   ::= alternative+  separator => <op equal priority> proper => 1
alternative                    ::= rhs <adverb list>

<adverb list>                  ::= <adverb list items>
<adverb list items>            ::= <adverb item>*
<adverb item>                  ::= action
                                 | autorank
                                 | <left association>
                                 | <right association>
                                 | <group association>
                                 | <separator specification>
                                 | <proper specification>
                                 | <rank specification>
                                 | <null ranking specification>
                                 | <priority specification>
                                 | <pause specification>
                                 | <latm specification>
                                 | naming
                                 | <null adverb>

action                         ::= 'action' '=>' <action name>
autorank                       ::= 'autorank' '=>' boolean
<left association>             ::= 'assoc' '=>' 'left'
<right association>            ::= 'assoc' '=>' 'right'
<group association>            ::= 'assoc' '=>' 'group'
<separator specification>      ::= 'separator' '=>' <single symbol>
<proper specification>         ::= 'proper' '=>' boolean
<rank specification>           ::= 'rank' '=>' <signed integer>
<null ranking specification>   ::= 'null-ranking' '=>' <null ranking constant>
<null ranking specification>   ::= 'null' 'rank' '=>' <null ranking constant>
<null ranking constant>        ::= 'low' | 'high'
<priority specification>       ::= 'priority' '=>' <signed integer>
<pause specification>          ::= 'pause' '=>' <before or after>
<event specification>          ::= 'event' '=>' <event initialization>
<event initialization>         ::= <event name> <event initializer>
<event initializer>            ::= '=' <on or off>
<on or off>                    ::= 'on' | 'off'
<event initializer>            ::= # empty
<latm specification>           ::= 'forgiving' '=>' true
<latm specification>           ::= 'latm' '=>' true
naming                         ::= 'name' '=>' <alternative name>
<null adverb>                  ::= ','

<alternative name>             ::= <standard name> | <quoted name>

<event name>        ::= <ascii graph name>
                      | <reserved event name>
<reserved event name> ~ ':symbol'

lhs                              ::= <symbol name>
rhs                              ::= <rhs primary>+
<rhs primary>                    ::= <single symbol>
<rhs primary>                    ::= <single symbol> '<' <grammar reference> '>'
<grammar reference>              ::= <quoted string>
<grammar reference>              ::= <signed integer>
<rhs primary>                    ::= <quoted string>
<rhs primary list>               ::= <rhs primary>+

<parenthesized rhs exception list> ::= '(' <rhs exception list> ')'
<rhs exception list>             ::= <rhs exception>+
#
# An exception cannot be a meta identifier.
#
<rhs exception>                  ::= <quoted string>
<rhs exception>                  ::= <character class>
<rhs exception>                  ::= <regular expression>

<single symbol> ::=  symbol
                  | <character class>
                  | <regular expression>
symbol          ::= <symbol name>
<symbol name>   ::= <bare name>
<symbol name>   ::= <bracketed name>

<action name>   ::= <ascii graph name>

:discard ~ whitespace
whitespace ~ [\s]+

# allow perl comments
:discard ~ <perl comment>
<perl comment> ~ /(?:(?:#)(?:[^\\n]*)(?:\\n|\\z))/ # \z is to match a comment at the very end without a vertical space
// Allow cpluscplus comments
:discard ~ <cplusplus comment>
<cplusplus comment> ~ /(?:(?:(?://)(?:[^\\n]*)(?:\\n|\\z))|(?:(?:\\/\\*)(?:(?:[^\\*]+|\\*(?!\\/))*)(?:\\*\\/)))/ # Same remark
/* Allow
   C comments */
:discard ~ <c comment>
<c comment> ~ /\/\*(?:[^\*]+|\*(?!\/))*\*\//

<op declare any grammar> ~ /:\[\d+\]:=/$1/
<op declare top grammar> ~ '::=' # ::= is an alias for the top grammar
<op declare lex grammar> ~ '~'   #   ~ is an alias for the lexer grammar
<op loosen>              ~ '||'
<op equal priority>      ~ '|'
quantifier             ::= '*' | '+'
<before or after>        ~ 'before' | 'after'

<signed integer>         ~ <integer> | <sign> <integer>
<sign>                   ~ [+-]
<integer>                ~ [\d]+     # By default, a character class by default never matched characters whose code points are greater than 127. So [\d] is [0-9]

true                     ~ '1'
boolean                  ~ [01]

<word character>               ~ [\w]   # \w is  [a-zA-Z0-9_]
<one or more word characters>  ~ <word character>+
<zero or more word characters> ~ <word character>*

# Perl identifiers allow an initial digit, which makes them slightly more liberal than Perl bare names
# but equivalent to Perl names with sigils.
<Perl identifier> ~ <word character>+
<double colon>    ~ '::'
<Perl name>       ~ <Perl identifier>+ separator => <double colon> proper => 1

<bare name>             ~ <word character>+
<standard name>         ~ [a-zA-Z] <zero or more word characters>
<bracketed name>        ~ '<' <bracketed name string> '>'
<bracketed name string> ~ [\s\w]+

<quoted string>         ~ /(?:(?|(?:\')(?:[^\\\']*(?:\\.[^\\\']*)*)(?:\')|(?:\")(?:[^\\\"]*(?:\\.[^\\\"]*)*)(?:\")|(?:\{)(?:[^\\\}]*(?:\\.[^\\\}]*)*)(?:\})))/s /* s modifier to match newline - we never match "" */ <character class modifiers>
<quoted name>         ~ /(?:(?|(?:\')(?:[^\\\']*(?:\\.[^\\\']*)*)(?:\')|(?:\")(?:[^\\\"]*(?:\\.[^\\\"]*)*)(?:\")|(?:\{)(?:[^\\\}]*(?:\\.[^\\\}]*)*)(?:\})))/s /* s modifier to match newline - we never match "" */

<character class regexp>      ~ /\[(?:[^\\]]*(?:\.[^\\]]*)*)\]/
<character class>             ~ <character class regexp> <character class modifiers>
<character class modifier>    ~ /:[eijmnsxDJUuaNubcA]/
<character class modifier>    ~ ':ic'   # :ic is added for Marpa::R2 compatibility and is meaningless
<character class modifiers>   ~ <character class modifier>*

<regular expression>           ~ /\/[^\\/]*(?:\.[^\\/]*)*\// <regular expression modifiers>
<regular expression modifiers> ~ [eijmnsxDJUuaN]*
